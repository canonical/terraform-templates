name: Create Terraform Project
on:
  workflow_dispatch:
    inputs:
      environment_service_name:
        description: 'Environment Service Name. E.g.: stg-events'
        required: true
        type: string
      service_owner:
        description: 'Owner of service'
        required: true
        type: string
      service_cloud:
        description: 'Service Cloud'
        default: 'ps6'
        type: choice
        options:
          - 'ps5'
          - 'ps6'
      service_region:
        description: 'Service Region'
        default: 'ps6'
        type: choice
        options:
          - 'ps5'
          - 'ps6'
      application_name:
        description: 'Service Name'
        required: true
        default: 'base'
        type: choice
        options:
          - 'base'
          - 'hello-kubecon'
      application_type:
        description: 'Application type'
        default: 'k8s'
        type: choice
        options:
          - 'k8s'
          - 'machine'

env:
  WORKING_DIR: terraform

jobs:
  create_terraform_project:
    name: Create Terraform Project
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Create working directory and files
        run: |
          mkdir ${{ env.WORKING_DIR }}
          cd ${{ env.WORKING_DIR }}
          touch backend.tf locals.tf main.tf

      - name: Setup backend.tf
        uses: cuchi/jinja2-action@v1.2.2
        with:
          template: templates/base/backend.tf.j2
          output_file: ${{ env.WORKING_DIR }}/backend.tf
          strict: true
          variables: |
            service_cloud=${{ inputs.service_cloud }}
            service_name=${{ inputs.service_name }}
            service_owner=${{ inputs.service_owner }}
            service_region=${{ inputs.service_region }}

      - name: Setup locals.tf
        uses: cuchi/jinja2-action@v1.2.2
        with:
          template: templates/base/locals.tf.j2
          output_file: ${{ env.WORKING_DIR }}/locals.tf
          strict: true
          variables: |
            service_cloud=${{ inputs.service_cloud }}
            service_name=${{ inputs.service_name }}

      - name: Setup application
        uses: cuchi/jinja2-action@v1.2.2
        with:
          template: templates/${{ inputs.application_type }}/${{ inputs.application_name }}/main.tf.j2
          output_file: ${{ env.WORKING_DIR }}/main.tf
          strict: true

      - name: Set identity
        run: |
          git config --global user.email "canonical-is-bot@canonical.com"
          git config --global user.name "Canonical IS Bot"

      - name: Clone the repo and set remote
        run: |
          git clone https://github.com/${{ vars.ORGANIZATION }}/${{ inputs.service_name }}

      - name: Commit and push changes
        run: |
          GIT_HASH=$(git rev-parse --short "$GITHUB_SHA")
          BRANCH="terraform-template-${{ inputs.service_name }}-${GIT_HASH}"
          echo "BRANCH=${BRANCH?}" >> "$GITHUB_ENV"
          cd ${{ inputs.service_name }}
          git checkout -b ${BRANCH?}
          cp -r ../${{ env.WORKING_DIR }} terraform
          git add .
          git commit -m "Add terraform project template for ${{ inputs.service_name }}"
          git remote set-url origin https://${{ secrets.REPO_ACCESS_TOKEN }}:x-oauth-basic@github.com/${{ vars.ORGANIZATION }}/${{ inputs.service_name }}.git
          git remote -v
          git push -v origin ${BRANCH?}
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}

      - name: Create pull request
        id: create_pull_request
        run: |
          PR_URL=$(gh pr create --repo ${{ vars.ORGANIZATION }}/${{ inputs.service_name }} -B main -H "${{ vars.ORGANIZATION }}:${BRANCH?}" --title "[AUTO] Add terraform project template for ${{ inputs.service_name }}" --body 'Created by Github action')
          echo "pr_url=${PR_URL}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
